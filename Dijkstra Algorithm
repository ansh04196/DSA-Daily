
// User Function Template
class Solution {
  public:
    // Function to find the shortest distance of all the vertices
    // from the source vertex src.
    vector<int> dijkstra(vector<vector<pair<int, int>>> &adj, int src) {
        int n = adj.size() ;
       set<pair<int,int>>st ;
       
        vector<int>dist(n) ;
        
        for(int i =0 ;i<n ;i++){
            dist[i] = 1e9 ;
        }
        st.insert({0, src}) ;
        
        dist[src] = 0 ;
       
        
        while(!st.empty()){
            auto it= *(st.begin()) ;
            int node = it.second ;
            int dis =  it.first ;
            st.erase(it) ;
            
            
            for(auto it: adj[node]){
                int edgewht = it.second ;
                int adjnode = it.first ;
                
                if(dis + edgewht < dist[adjnode]){
                    if(dist[adjnode] != 1e9){
                        st.erase({dist[adjnode] , adjnode}) ;
                        
                    }
                    
                    dist[adjnode] = dis + edgewht; 
                    st.insert({dist[adjnode] , adjnode}) ;
                    
                }
            }
        }
        
        return dist ;
        
        
        
         
    }
};



//GFG POTD solution for 11 April
