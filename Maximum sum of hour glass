class Solution {
  public:
    int findMaxSum(int N, int M, vector<vector<int>> Mat) {
        if (N < 3 or M < 3) return -1;

        // Here loop runs (R-2)*(C-2) times considering
        // different top left cells of hour glasses.
        int max_sum = INT_MIN;
        for (int i = 0; i < N - 2; i++) {
            for (int j = 0; j < M - 2; j++) {
                // Considering mat[i][j] as top left cell of
                // hour glass.
                int sum =
                    (Mat[i][j] + Mat[i][j + 1] + Mat[i][j + 2]) +
                    (Mat[i + 1][j + 1]) +
                    (Mat[i + 2][j] + Mat[i + 2][j + 1] + Mat[i + 2][j + 2]);

                // If previous sum is less then current sum then
                // update new sum in max_sum
                max_sum = max(max_sum, sum);
            }
        }
        return max_sum;
    }
};
