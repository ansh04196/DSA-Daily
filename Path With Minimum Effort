class Solution {
public:
    int MinimumEffort(int rows, int columns,
                      vector<vector<int> >& heights)
    {
    
        int N = heights.size(), M = heights[0].size();

       
        priority_queue<
            pair<int, pair<int, int> >,
            vector<pair<int, pair<int, int> > >,
            greater<pair<int, pair<int, int> > > >
            pq;

       
        vector<vector<int> > d(N, vector<int>(M, 1e9));
        
        d[0][0] = 0;
        pq.push({ 0, { 0, 0 } });

        
        int dx[] = { -1, 0, 1, 0 };
        int dy[] = { 0, 1, 0, -1 };

        
        while (!pq.empty()) {
            int diff = pq.top().first;
            int r = pq.top().second.first;
            int c = pq.top().second.second;
            pq.pop();
          
            if (r == N - 1 && c == M - 1)
                return diff;
            for (int i = 0; i < 4; i++) {
              
                int nx = dx[i] + r;
                int ny = dy[i] + c;

            
                if (nx >= 0 && nx < N && ny >= 0
                    && ny < M) {
                  
                    int nf = max(abs(heights[r][c]
                                     - heights[nx][ny]),
                                 diff);

                   
                    if (nf < d[nx][ny]) {
                        d[nx][ny] = nf;
                        pq.push({ nf, { nx, ny } });
                    }
                }
            }
        }
        
        return -1;
    }
};
