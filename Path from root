class Solution
{
    public:
        void printPathsUtil(Node* curr_node, int sum,
                     int sum_so_far, vector<int> &path , vector<vector<int>> &ans)
            {
            	if (curr_node == NULL)
            		return;
            
            	// add the current node's value
            	sum_so_far += curr_node->key;
            
            	// add the value to path
            	path.push_back(curr_node->key);
            
            	// print the required path
            	if (sum_so_far == sum )
            	{
            		ans.push_back(path);
            	}
            
            	// if left child exists
            	if (curr_node->left != NULL)
            		printPathsUtil(curr_node->left, sum, sum_so_far, path, ans);
            
            	// if right child exists
            	if (curr_node->right != NULL)
            		printPathsUtil(curr_node->right, sum, sum_so_far, path, ans);
            
            
            	// Remove last element from path
            	// and move back to parent
            	path.pop_back();
            }

    public:
        vector<vector<int>> printPaths(Node *root, int sum)
            {
            	vector<int> path;
            	vector<vector<int>> ans;
            	printPathsUtil(root, sum, 0, path, ans);
            	return ans;
            }
};
