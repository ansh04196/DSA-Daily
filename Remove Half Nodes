class Solution {
  public:
    Node* RemoveHalfNodes(Node* root) {
        if (root == NULL)
            return NULL;

        root->left = RemoveHalfNodes(root->left);
        root->right = RemoveHalfNodes(root->right);

        if (root->left == NULL && root->right == NULL)
            return root;

        /* if current nodes is a half node with left
           child NULL left, then it's right child is
           returned and replaces it in the given tree */
        if (root->left == NULL) {
            struct Node* new_root = root->right;
            free(root); // To avoid memory leak
            return new_root;
        }

        /* if current nodes is a half node with right
           child NULL right, then it's right child is
           returned and replaces it in the given tree  */
        if (root->right == NULL) {
            struct Node* new_root = root->left;
            free(root); // To avoid memory leak
            return new_root;
        }

        return root;
    }
};
