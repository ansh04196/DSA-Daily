class Solution {
  public:
    int countWays(string s1, string s2) {
        int n = s1.length(), m = s2.length();

        // create a table to store result for sub-problems
        int dp[n + 1][m + 1] = {{0}};

        for (int i = 0; i <= m; i++)
            dp[0][i] = 0;
        for (int i = 0; i <= n; i++)
            dp[i][0] = 1;

        int mod = 1e9 + 7;
        // fill the table in bottom-up manner
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                // if last characters are same, we have two
                // options -
                // 1. consider last characters of both strings
                //    in solution
                // 2. ignore last character of first string
                if (s1[i - 1] == s2[j - 1]) {
                    dp[i][j] = (dp[i - 1][j - 1] + dp[i - 1][j]) % mod;
                }
                // If last character are different, ignore
                // last character of first string
                else {
                    dp[i][j] = dp[i - 1][j] % mod;
                }
            }
        }
        return dp[n][m] % mod;
    }
};
